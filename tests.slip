;-*- mode: lisp-data; coding: utf-8 -*-

(* 10 (+ (/ 2 (+ 2 5)) 6))              ; ↝ 60

((λ x (+ x x)) 7)                       ; ↝ 14

((λ x (λ y (* x y))) 3 4)               ; ↝ 12

(let x 2 (let y 3 (+ x y)))             ; ↝ 5

(if (= 2 2) true false)                 ; ↝ True

(let x 5 (if (= x 5) 42 55))            ; ↝ 42

(let x 5 (if (= x 6) 
    (let y 10 (+ x y)) 
        (let z 20 (* x z))))            ; ↝ 100

(ref! 5)                                ; ↝ ptr<0>

(get! (ref! 2))                         ; ↝ 2

(let c1 (ref! 6) (let c2 c1 (let _ 
    (set! c2 7) (+ (get! c1)
         (get! c2)))))                  ; ↝ 14

(let x (ref! 5) (let y (ref! 10)
 (let _ (set! x (get! y)) 
    (get! x))))                         ; ↝ 10

(let c1 (ref! 6) (let c2 c1 (let _ 
    (set! c2 7) (- (get! c1)
        (get! c2)))))                   ; ↝ 0
